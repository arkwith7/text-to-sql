#!/bin/bash
# setup-northwind.sh - ÏïàÏ†ïÏ†ÅÏù∏ Northwind PostgreSQL Ïª®ÌÖåÏù¥ÎÑà ÏÑ§Ï†ï
#
# üéØ Ï£ºÏöî Í∞úÏÑ† ÏÇ¨Ìï≠:
# - Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù ÌõÑ Ïû¨ÏÇ¨Ïö© (Î∂àÌïÑÏöîÌïú Ïû¨ÏÉùÏÑ± Î∞©ÏßÄ)
# - Î≥ºÎ•® Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± Í≤ÄÏ¶ù
# - Ïã§Ìå® Ïãú ÏûêÎèô Î≥µÍµ¨ Î∞è Ïû¨ÏãúÎèÑ
# - ÏÉÅÏÑ∏Ìïú ÏßÑÎã® Ï†ïÎ≥¥ Ï†úÍ≥µ
#
# üìã ÏÇ¨Ïö©Î≤ï:
#   ./postgre/setup-northwind.sh [--force-recreate]
#
# üîß ÏòµÏÖò:
#   --force-recreate: Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑàÏôÄ Î≥ºÎ•®ÏùÑ Í∞ïÏ†úÎ°ú ÏÇ≠Ï†úÌïòÍ≥† ÏÉàÎ°ú ÏÉùÏÑ±

set -e  # Ïò§Î•ò Î∞úÏÉù Ïãú Ïä§ÌÅ¨Î¶ΩÌä∏ Ï§ëÎã®

FORCE_RECREATE=false
if [[ "$1" == "--force-recreate" ]]; then
    FORCE_RECREATE=true
    echo "üîÑ Force recreate mode enabled"
fi

echo "üê≥ Northwind PostgreSQL Ïª®ÌÖåÏù¥ÎÑà ÏÑ§Ï†ï ÏãúÏûë..."

# Function to parse database URL
parse_database_url() {
    local url="$1"
    if [[ $url =~ postgresql://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+) ]]; then
        DB_USER="${BASH_REMATCH[1]}"
        DB_PASSWORD="${BASH_REMATCH[2]}"
        DB_HOST="${BASH_REMATCH[3]}"
        DB_PORT="${BASH_REMATCH[4]}"
        DB_NAME="${BASH_REMATCH[5]}"
    else
        echo "‚ùå Invalid DATABASE_URL format: $url"
        echo "   Expected format: postgresql://user:password@host:port/database"
        exit 1
    fi
}

# Check if .env file exists and load it
if [ -f "../.env" ]; then
    echo "üìã Loading environment variables from .env..."
    set -a
    source ../.env
    set +a
    
    if [ -n "$DATABASE_URL" ]; then
        parse_database_url "$DATABASE_URL"
        echo "üìä Configuration from .env:"
        echo "   Database: $DB_USER@$DB_HOST:$DB_PORT/$DB_NAME"
    else
        echo "‚ö†Ô∏è  DATABASE_URL not found in .env, using defaults"
        DB_USER="postgres"
        DB_PASSWORD="password"
        DB_HOST="localhost"
        DB_PORT="5432"
        DB_NAME="northwind"
    fi
else
    echo "‚ö†Ô∏è  .env file not found, using default configuration"
    DB_USER="postgres"
    DB_PASSWORD="password"
    DB_HOST="localhost"
    DB_PORT="5432"
    DB_NAME="northwind"
fi

POSTGRES_CONTAINER_NAME="northwind-postgres"
POSTGRES_VOLUME_NAME="postgres_northwind_data"

# Function to check if database has data
check_database_data() {
    local container_name=$1
    echo "üîç Checking if database has Northwind data..."
    
    if ! docker ps --format "{{.Names}}" | grep -q "^${container_name}$"; then
        echo "   Container not running"
        return 1
    fi
    
    # Check if northwind database exists and has data
    local customer_count=$(docker exec $container_name psql -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM customers;" 2>/dev/null | tr -d ' ' || echo "0")
    
    if [ -n "$customer_count" ] && [ "$customer_count" -gt 0 ]; then
        echo "‚úÖ Database has $customer_count customers - data is present"
        return 0
    else
        echo "‚ùå Database is empty or northwind data is missing"
        return 1
    fi
}

# Function to wait for PostgreSQL
wait_for_postgres() {
    local container_name=$1
    echo "‚è≥ Waiting for PostgreSQL to be ready..."
    
    for i in {1..60}; do
        if docker exec $container_name pg_isready -h localhost -p 5432 -U $DB_USER > /dev/null 2>&1; then
            echo "‚úÖ PostgreSQL is ready"
            return 0
        fi
        echo "   Attempt $i/60: PostgreSQL not ready yet..."
        sleep 2
    done
    
    echo "‚ùå PostgreSQL failed to start within 120 seconds"
    return 1
}

# Function to load northwind data
load_northwind_data() {
    local container_name=$1
    
    echo "üì• Preparing Northwind sample data..."
    
    # Download northwind.sql if not exists
    if [ ! -f "northwind.sql" ]; then
        echo "   Downloading Northwind SQL file..."
        if curl -s -o northwind.sql https://raw.githubusercontent.com/pthom/northwind_psql/master/northwind.sql; then
            echo "‚úÖ Northwind SQL file downloaded"
        else
            echo "‚ùå Failed to download Northwind SQL file"
            return 1
        fi
    else
        echo "‚úÖ Northwind SQL file already exists"
    fi
    
    echo "üîÑ Loading Northwind data into database..."
    
    # Copy SQL file to container
    if ! docker cp northwind.sql $container_name:/northwind.sql; then
        echo "‚ùå Failed to copy SQL file to container"
        return 1
    fi
    
    # Load data with detailed error reporting
    if docker exec $container_name psql -U $DB_USER -d $DB_NAME -f /northwind.sql; then
        echo "‚úÖ Northwind data loaded successfully"
        
        # Verify data was loaded
        local customer_count=$(docker exec $container_name psql -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM customers;" 2>/dev/null | tr -d ' ')
        if [ -n "$customer_count" ] && [ "$customer_count" -gt 0 ]; then
            echo "‚úÖ Data verification successful - Found $customer_count customers"
            return 0
        else
            echo "‚ùå Data verification failed - Tables might be empty"
            return 1
        fi
    else
        echo "‚ùå Failed to load Northwind data"
        return 1
    fi
}

# Main setup logic
setup_postgres_container() {
    
    # Check if container exists and is running with data
    if ! $FORCE_RECREATE && docker ps --format "{{.Names}}" | grep -q "^${POSTGRES_CONTAINER_NAME}$"; then
        echo "üì¶ Container $POSTGRES_CONTAINER_NAME is running, checking data..."
        
        if check_database_data $POSTGRES_CONTAINER_NAME; then
            echo "üéâ Existing container has valid data - no recreation needed!"
            return 0
        else
            echo "‚ö†Ô∏è  Container exists but data is missing, will reload data..."
            if wait_for_postgres $POSTGRES_CONTAINER_NAME && load_northwind_data $POSTGRES_CONTAINER_NAME; then
                echo "üéâ Data reloaded successfully!"
                return 0
            else
                echo "‚ùå Failed to reload data, will recreate container..."
            fi
        fi
    fi
    
    # Check if stopped container exists
    if docker ps -a --format "{{.Names}}" | grep -q "^${POSTGRES_CONTAINER_NAME}$"; then
        echo "üóëÔ∏è  Removing existing container..."
        docker stop $POSTGRES_CONTAINER_NAME 2>/dev/null || true
        docker rm $POSTGRES_CONTAINER_NAME 2>/dev/null || true
    fi
    
    # Remove volume if force recreate
    if $FORCE_RECREATE; then
        echo "üóëÔ∏è  Removing existing volume..."
        docker volume rm $POSTGRES_VOLUME_NAME 2>/dev/null || true
    fi
    
    # Create volume if not exists
    if ! docker volume ls --format "{{.Name}}" | grep -q "^${POSTGRES_VOLUME_NAME}$"; then
        echo "üìÇ Creating PostgreSQL volume..."
        docker volume create $POSTGRES_VOLUME_NAME
    fi
    
    # Check if port is available
    if lsof -Pi :$DB_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "‚ùå Port $DB_PORT is already in use"
        echo "   Please stop the service using this port or change the port in .env"
        exit 1
    fi
    
    echo "üöÄ Creating PostgreSQL container..."
    echo "   Container: $POSTGRES_CONTAINER_NAME"
    echo "   Database: $DB_NAME"
    echo "   User: $DB_USER"
    echo "   Port: $DB_PORT"
    echo "   Volume: $POSTGRES_VOLUME_NAME"
    
    # Create and start container
    docker run -d \
        --name $POSTGRES_CONTAINER_NAME \
        -e POSTGRES_DB=$DB_NAME \
        -e POSTGRES_USER=$DB_USER \
        -e POSTGRES_PASSWORD=$DB_PASSWORD \
        -e POSTGRES_INITDB_ARGS="--encoding=UTF8 --locale=C" \
        -p $DB_PORT:5432 \
        -v $POSTGRES_VOLUME_NAME:/var/lib/postgresql/data \
        --restart unless-stopped \
        postgres:15
    
    # Wait for PostgreSQL to be ready
    if ! wait_for_postgres $POSTGRES_CONTAINER_NAME; then
        echo "‚ùå PostgreSQL failed to start"
        docker logs $POSTGRES_CONTAINER_NAME --tail 20
        exit 1
    fi
    
    # Load Northwind data
    if ! load_northwind_data $POSTGRES_CONTAINER_NAME; then
        echo "‚ùå Failed to load Northwind data"
        docker logs $POSTGRES_CONTAINER_NAME --tail 20
        exit 1
    fi
    
    echo "üéâ PostgreSQL container setup completed successfully!"
}

# Test connection from host
test_host_connection() {
    echo "üîó Testing connection from host..."
    
    if command -v psql > /dev/null 2>&1; then
        if PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT version();" > /dev/null 2>&1; then
            echo "‚úÖ Host connection test successful"
        else
            echo "‚ö†Ô∏è  PostgreSQL container running but not accessible from host"
            echo "   This might be normal if psql client version is incompatible"
        fi
    else
        echo "‚ÑπÔ∏è  psql not installed on host, skipping direct connection test"
    fi
}

# Main execution
main() {
    setup_postgres_container
    test_host_connection
    
    # Cleanup
    rm -f northwind.sql
    
    echo ""
    echo "üéâ Northwind Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï§ÄÎπÑ ÏôÑÎ£å!"
    echo ""
    echo "üìä Connection Information:"
    echo "   Host: $DB_HOST"
    echo "   Port: $DB_PORT"
    echo "   Database: $DB_NAME"
    echo "   User: $DB_USER"
    echo "   Password: $DB_PASSWORD"
    echo "   Volume: $POSTGRES_VOLUME_NAME"
    echo ""
    echo "üîó Connection URL: postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME"
    echo ""
    echo "üõ†Ô∏è  Management Commands:"
    echo "   Check status: docker ps | grep $POSTGRES_CONTAINER_NAME"
    echo "   View logs: docker logs $POSTGRES_CONTAINER_NAME"
    echo "   Connect: docker exec -it $POSTGRES_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME"
    echo "   Stop: docker stop $POSTGRES_CONTAINER_NAME"
    echo "   Force recreate: $0 --force-recreate"
    echo ""
    echo "üí° You can now start the backend with: ./backend/dev-backend.sh"
}

# Run main function
main "$@"
