#!/bin/bash

# Backend Development Script
# Run FastAPI backend in development mode with proper service management
#
# üéØ Ï£ºÏöî Í∏∞Îä•:
# - Text-to-SQL Î∞±ÏóîÎìú Í∞úÎ∞ú ÌôòÍ≤Ω Ï†ÑÏö© ÏãúÏûë Ïä§ÌÅ¨Î¶ΩÌä∏
# - .env ÌååÏùº Í∏∞Î∞ò ÌôòÍ≤Ω ÏÑ§Ï†ï ÏûêÎèô Í≤ÄÏ¶ù Î∞è ÌååÏã±
# - PostgreSQL Î∞è Redis ÏÑúÎπÑÏä§ ÏùòÏ°¥ÏÑ± ÏûêÎèô Í¥ÄÎ¶¨
# - Python Í∞ÄÏÉÅÌôòÍ≤Ω Î∞è ÏùòÏ°¥ÏÑ± Ìå®ÌÇ§ÏßÄ ÏûêÎèô ÏÑ§Ï†ï
# - FastAPI Í∞úÎ∞ú ÏÑúÎ≤Ñ Ìï´ Î¶¨Î°úÎìú Î™®ÎìúÎ°ú Ïã§Ìñâ
# - Ï†ÑÏ≤¥ Î∞±ÏóîÎìú Ïä§ÌÉù Ìó¨Ïä§Ï≤¥ÌÅ¨ Î∞è Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
#
# üìã ÏÇ¨Ïö©Î≤ï:
#   ./dev-backend.sh
#
# üîß ÏàòÌñâ ÏûëÏóÖ:
#   1. .env ÌååÏùº Ï°¥Ïû¨ Î∞è ÌïÑÏàò ÌôòÍ≤ΩÎ≥ÄÏàò Í≤ÄÏ¶ù
#   2. DATABASE_URL, REDIS_URL ÌååÏã± Î∞è Ïó∞Í≤∞ ÏÑ§Ï†ï Ï∂îÏ∂ú
#   3. PostgreSQL Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ÌôïÏù∏ Î∞è ÏûêÎèô ÏãúÏûë/ÏÉùÏÑ±
#   4. Redis Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ÌôïÏù∏ Î∞è ÏûêÎèô ÏãúÏûë/ÏÉùÏÑ±
#   5. Ìò∏Ïä§Ìä∏ÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑúÎπÑÏä§ Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏
#   6. Python Í∞ÄÏÉÅÌôòÍ≤Ω ÌôúÏÑ±Ìôî Î∞è ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
#   7. Î∞±ÏóîÎìú ÌôòÍ≤Ω ÏÑ§Ï†ï Í≤ÄÏ¶ù (config.py Ïã§Ìñâ)
#   8. FastAPI Í∞úÎ∞ú ÏÑúÎ≤Ñ ÏãúÏûë (uvicorn --reload)
#
# üì¶ Í¥ÄÎ¶¨ ÎåÄÏÉÅ:
#   - PostgreSQL: northwind-postgres (Î©îÏù∏ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§)
#   - Redis: redis-stack (Ï∫êÏãú Î∞è ÏÑ∏ÏÖò Ïä§ÌÜ†Ïñ¥)
#   - Python Í∞ÄÏÉÅÌôòÍ≤Ω: venv (Î∞±ÏóîÎìú ÏùòÏ°¥ÏÑ±)
#   - FastAPI ÏÑúÎ≤Ñ: localhost:8000 (Í∞úÎ∞ú ÏÑúÎ≤Ñ)
#
# ‚öôÔ∏è  ÌïÑÏàò ÌôòÍ≤Ω ÏÑ§Ï†ï:
#   - AZURE_OPENAI_ENDPOINT: Azure OpenAI ÏÑúÎπÑÏä§ ÏóîÎìúÌè¨Ïù∏Ìä∏
#   - AZURE_OPENAI_API_KEY: Azure OpenAI API ÌÇ§
#   - AZURE_OPENAI_DEPLOYMENT_NAME: Î∞∞Ìè¨Îêú Î™®Îç∏ Ïù¥Î¶Ñ
#   - DATABASE_URL: PostgreSQL Ïó∞Í≤∞ URL (postgresql://user:pass@host:port/db)
#   - REDIS_URL: Redis Ïó∞Í≤∞ URL (redis://host:port)
#   - SECRET_KEY: JWT ÌÜ†ÌÅ∞ ÏïîÌò∏Ìôî ÌÇ§
#   - REFRESH_TOKEN_EXPIRE_DAYS: Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ ÎßåÎ£å Í∏∞Í∞Ñ
#
# üîó Ïó∞Í¥Ä Ïä§ÌÅ¨Î¶ΩÌä∏:
#   - setup-northwind.sh: PostgreSQL Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
#   - db-helper.sh: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïª®ÌÖåÏù¥ÎÑà Í¥ÄÎ¶¨
#   - start-app.sh: Ï†ÑÏ≤¥ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïä§ÌÉù
#
# üí° Í∞úÎ∞ú ÏõåÌÅ¨ÌîåÎ°úÏö∞:
#   1. ÏµúÏ¥à Ïã§Ìñâ: Î™®Îì† ÏÑúÎπÑÏä§ ÏûêÎèô ÏÑ§Ï†ï Î∞è ÏãúÏûë
#   2. ÏùºÎ∞ò Ïã§Ìñâ: Í∏∞Ï°¥ ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏ ÌõÑ Î∞±ÏóîÎìúÎßå Ïû¨ÏãúÏûë
#   3. ÏΩîÎìú Î≥ÄÍ≤Ω: Ìï´ Î¶¨Î°úÎìúÎ°ú ÏûêÎèô Î∞òÏòÅ
#   4. ÎîîÎ≤ÑÍπÖ: ÏÉÅÏÑ∏Ìïú Î°úÍ∑∏ Î∞è ÏÉÅÌÉú Ï†ïÎ≥¥ Ï†úÍ≥µ
#
# üö® Ï£ºÏùòÏÇ¨Ìï≠:
#   - Ï≤´ Ïã§Ìñâ Ïãú Docker Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìúÎ°ú ÏãúÍ∞Ñ ÏÜåÏöî
#   - PostgreSQL Ï¥àÍ∏∞Ìôî Ïãú Northwind Îç∞Ïù¥ÌÑ∞ ÏûêÎèô Î°úÎìú
#   - Ìè¨Ìä∏ Ï∂©Îèå Ïãú Í∏∞Ï°¥ ÏÑúÎπÑÏä§ ÌôïÏù∏ ÌïÑÏöî (8000, 5432, 6379)

echo "üêç Starting Backend Development Server..."

# Function to parse URL and extract components
parse_database_url() {
    local url="$1"
    # Extract components from postgresql://user:password@host:port/database
    if [[ $url =~ postgresql://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+) ]]; then
        DB_USER="${BASH_REMATCH[1]}"
        DB_PASSWORD="${BASH_REMATCH[2]}"
        DB_HOST="${BASH_REMATCH[3]}"
        DB_PORT="${BASH_REMATCH[4]}"
        DB_NAME="${BASH_REMATCH[5]}"
    else
        echo "‚ùå Invalid DATABASE_URL format: $url"
        exit 1
    fi
}

parse_redis_url() {
    local url="$1"
    # Extract components from redis://host:port
    if [[ $url =~ redis://([^:]+):([0-9]+) ]]; then
        REDIS_HOST="${BASH_REMATCH[1]}"
        REDIS_PORT="${BASH_REMATCH[2]}"
    elif [[ $url =~ redis://([^:]+) ]]; then
        REDIS_HOST="${BASH_REMATCH[1]}"
        REDIS_PORT="6379"
    else
        echo "‚ùå Invalid REDIS_URL format: $url"
        exit 1
    fi
}

# Check if .env file exists in project root
if [ ! -f "../.env" ]; then
    echo "‚ö†Ô∏è  .env file not found at ../.env. Copying from .env.example..."
    if [ -f "../.env.example" ]; then
        cp "../.env.example" "../.env"
        echo "üìù Please edit ../.env file with your Azure OpenAI credentials before continuing."
    else
        echo "‚ùå .env.example file not found. Please create ../.env file manually."
    fi
    exit 1
fi

# Source environment variables
echo "üìã Loading environment variables from ../.env..."
set -a  # automatically export all variables
source "../.env"
set +a

# Check if required environment variables are set
echo "üîç Validating environment configuration..."
if [ -z "$AZURE_OPENAI_ENDPOINT" ] || [ -z "$AZURE_OPENAI_API_KEY" ] || [ -z "$AZURE_OPENAI_DEPLOYMENT_NAME" ]; then
    echo "‚ùå Missing required Azure OpenAI configuration in .env file"
    echo "   Please set: AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_API_KEY, AZURE_OPENAI_DEPLOYMENT_NAME"
    exit 1
fi

if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå DATABASE_URL not found in .env file"
    exit 1
fi

if [ -z "$REDIS_URL" ]; then
    echo "‚ùå REDIS_URL not found in .env file"
    exit 1
fi

echo "‚úÖ Environment configuration validated"

# Parse database and redis URLs
parse_database_url "$DATABASE_URL"
parse_redis_url "$REDIS_URL"

echo "üìä Configuration Summary:"
echo "   Database: $DB_USER@$DB_HOST:$DB_PORT/$DB_NAME"
echo "   Redis: $REDIS_HOST:$REDIS_PORT"

# Check if PostgreSQL is running
echo ""
echo "üîç Checking PostgreSQL availability..."
POSTGRES_CONTAINER_NAME="northwind-postgres"

# Check if PostgreSQL container exists and is running
if docker ps --format "{{.Names}}" | grep -q "^${POSTGRES_CONTAINER_NAME}$"; then
    echo "‚úÖ PostgreSQL container '${POSTGRES_CONTAINER_NAME}' is running"
    
    # Test actual connection
    echo "üîó Testing PostgreSQL connection..."
    if docker exec $POSTGRES_CONTAINER_NAME pg_isready -h localhost -p 5432 -U postgres > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL connection test successful"
        
        # Check if Northwind database needs initialization
        echo "üóÑÔ∏è  Checking if Northwind database needs initialization..."
        
        # Check if Northwind tables exist (checking for customers table as indicator)
        echo "üîç Checking if Northwind data already exists..."
        TABLE_COUNT=$(docker exec $POSTGRES_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'customers';" 2>/dev/null | tr -d ' \n' || echo "0")
        
        if [ "$TABLE_COUNT" -gt 0 ]; then
            echo "‚úÖ Northwind database already initialized (found existing tables)"
        else
            echo "üì• Northwind database not found, initializing with sample data..."
            if [ -f "../postgre/northwind.sql" ]; then
                echo "üìÇ Loading Northwind data from ../postgre/northwind.sql..."
                docker exec -i $POSTGRES_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME < ../postgre/northwind.sql
                echo "‚úÖ Northwind data loaded successfully"
            else
                echo "‚ö†Ô∏è  Northwind SQL file not found at ../postgre/northwind.sql"
                echo "   Please ensure the file exists at /home/wjadmin/Dev/text-to-sql/postgre/northwind.sql"
            fi
        fi
    else
        echo "‚ö†Ô∏è  PostgreSQL container is running but not ready. Waiting..."
        sleep 5
    fi
    
elif docker ps -a --format "{{.Names}}" | grep -q "^${POSTGRES_CONTAINER_NAME}$"; then
    echo "üîÑ Found stopped PostgreSQL container. Starting it..."
    docker start ${POSTGRES_CONTAINER_NAME}
    echo "‚è≥ Waiting for PostgreSQL to initialize..."
    sleep 10
    
    # Wait for PostgreSQL to be ready
    echo "üîó Waiting for PostgreSQL to accept connections..."
    for i in {1..30}; do
        if docker exec $POSTGRES_CONTAINER_NAME pg_isready -h localhost -p 5432 -U postgres > /dev/null 2>&1; then
            echo "‚úÖ PostgreSQL is ready"
            break
        fi
        echo "   Attempt $i/30: PostgreSQL not ready yet..."
        sleep 2
    done
    
    # Check if Northwind database needs initialization
    echo "üóÑÔ∏è  Checking if Northwind database needs initialization..."
    
    # Check if Northwind tables exist (checking for customers table as indicator)
    echo "üîç Checking if Northwind data already exists..."
    TABLE_COUNT=$(docker exec $POSTGRES_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'customers';" 2>/dev/null | tr -d ' \n' || echo "0")
    
    if [ "$TABLE_COUNT" -gt 0 ]; then
        echo "‚úÖ Northwind database already initialized (found existing tables)"
    else
        echo "üì• Northwind database not found, initializing with sample data..."
        if [ -f "../postgre/northwind.sql" ]; then
            echo "üìÇ Loading Northwind data from ../postgre/northwind.sql..."
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME < ../postgre/northwind.sql
            echo "‚úÖ Northwind data loaded successfully"
        else
            echo "‚ö†Ô∏è  Northwind SQL file not found at ../postgre/northwind.sql"
            echo "   Please ensure the file exists at /home/wjadmin/Dev/text-to-sql/postgre/northwind.sql"
        fi
    fi
    
else
    echo "üöÄ PostgreSQL container not found. Creating and starting a new one..."
    
    # Create PostgreSQL container with settings from .env
    docker run -d \
        --name ${POSTGRES_CONTAINER_NAME} \
        -e POSTGRES_USER=${DB_USER} \
        -e POSTGRES_PASSWORD=${DB_PASSWORD} \
        -e POSTGRES_DB=${DB_NAME} \
        -p ${DB_PORT}:5432 \
        -v postgres_data:/var/lib/postgresql/data \
        postgres:15
    
    echo "‚è≥ Waiting for PostgreSQL to initialize..."
    sleep 15
    
    # Wait for PostgreSQL to be ready
    echo "üîó Waiting for PostgreSQL to accept connections..."
    for i in {1..60}; do
        if docker exec $POSTGRES_CONTAINER_NAME pg_isready -h localhost -p 5432 -U postgres > /dev/null 2>&1; then
            echo "‚úÖ PostgreSQL is ready"
            break
        fi
        echo "   Attempt $i/60: PostgreSQL not ready yet..."
        sleep 2
    done
    
    # Initialize Northwind database if needed
    echo "üóÑÔ∏è  Checking if Northwind database needs initialization..."
    
    # Check if Northwind tables exist (checking for customers table as indicator)
    echo "üîç Checking if Northwind data already exists..."
    TABLE_COUNT=$(docker exec $POSTGRES_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'customers';" 2>/dev/null | tr -d ' \n' || echo "0")
    
    if [ "$TABLE_COUNT" -gt 0 ]; then
        echo "‚úÖ Northwind database already initialized (found existing tables)"
    else
        echo "üì• Northwind database not found, initializing with sample data..."
        if [ -f "../postgre/northwind.sql" ]; then
            echo "ÔøΩ Loading Northwind data from ../postgre/northwind.sql..."
            docker exec -i $POSTGRES_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME < ../postgre/northwind.sql
            echo "‚úÖ Northwind data loaded successfully"
        else
            echo "‚ö†Ô∏è  Northwind SQL file not found at ../postgre/northwind.sql"
            echo "   Please ensure the file exists at /home/wjadmin/Dev/text-to-sql/postgre/northwind.sql"
        fi
    fi
fi

# Check if Redis is running
echo ""
echo "üîç Checking Redis availability..."
REDIS_CONTAINER_NAME="redis-stack"

if docker ps --format "{{.Names}}" | grep -q "^${REDIS_CONTAINER_NAME}$"; then
    echo "‚úÖ Redis container '${REDIS_CONTAINER_NAME}' is running"
    
    # Test Redis connection
    echo "üîó Testing Redis connection..."
    if docker exec $REDIS_CONTAINER_NAME redis-cli ping > /dev/null 2>&1; then
        echo "‚úÖ Redis connection test successful"
    else
        echo "‚ö†Ô∏è  Redis container is running but not responding. Restarting..."
        docker restart $REDIS_CONTAINER_NAME
        sleep 5
    fi
    
elif docker ps -a --format "{{.Names}}" | grep -q "^${REDIS_CONTAINER_NAME}$"; then
    echo "üîÑ Found stopped Redis container. Starting it..."
    docker start ${REDIS_CONTAINER_NAME}
    sleep 5
    
    # Test Redis connection
    echo "üîó Testing Redis connection..."
    for i in {1..10}; do
        if docker exec $REDIS_CONTAINER_NAME redis-cli ping > /dev/null 2>&1; then
            echo "‚úÖ Redis is ready"
            break
        fi
        echo "   Attempt $i/10: Redis not ready yet..."
        sleep 1
    done
    
else
    echo "üöÄ Redis container not found. Creating and starting a new one..."
    
    # Create Redis container with settings from .env
    docker run -d \
        --name ${REDIS_CONTAINER_NAME} \
        -p ${REDIS_PORT}:6379 \
        -p 8001:8001 \
        redis/redis-stack:latest
    
    echo "‚è≥ Waiting for Redis to initialize..."
    sleep 10
    
    # Test Redis connection
    echo "üîó Testing Redis connection..."
    for i in {1..20}; do
        if docker exec $REDIS_CONTAINER_NAME redis-cli ping > /dev/null 2>&1; then
            echo "‚úÖ Redis is ready"
            break
        fi
        echo "   Attempt $i/20: Redis not ready yet..."
        sleep 1
    done
fi

# Verify services are accessible from host
echo ""
echo "üîó Final connectivity tests..."

# Test PostgreSQL from host
if command -v psql > /dev/null 2>&1; then
    if PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT 1;" > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL accessible from host"
    else
        echo "‚ö†Ô∏è  PostgreSQL container running but not accessible from host"
    fi
else
    echo "‚ÑπÔ∏è  psql not installed on host, skipping direct connection test"
fi

# Test Redis from host
if command -v redis-cli > /dev/null 2>&1; then
    if redis-cli -h $REDIS_HOST -p $REDIS_PORT ping > /dev/null 2>&1; then
        echo "‚úÖ Redis accessible from host"
    else
        echo "‚ö†Ô∏è  Redis container running but not accessible from host"
    fi
else
    echo "‚ÑπÔ∏è  redis-cli not installed on host, skipping direct connection test"
fi

echo ""
echo "üìÇ Changing to backend directory..."
cd backend

# Check if virtual environment exists
if [ ! -d "venv" ]; then
    echo "üêç Creating Python virtual environment..."
    python3 -m venv venv
fi

# Activate virtual environment
echo "üîÑ Activating virtual environment..."
source venv/bin/activate

# Install/upgrade dependencies
echo "üì¶ Installing Python dependencies..."
pip install --upgrade pip
pip install -r requirements.txt

# Validate configuration with Python
echo ""
echo "üîß Validating backend configuration..."
if python -c "from core.config import get_settings, validate_settings; validate_settings(); print('‚úÖ Configuration validation passed')" 2>/dev/null; then
    echo "‚úÖ Backend configuration is valid"
else
    echo "‚ùå Backend configuration validation failed"
    echo "   Please check your .env file and config.py settings"
    exit 1
fi

echo ""
echo "üöÄ Starting FastAPI development server..."
echo "   API: http://localhost:8000"
echo "   Docs: http://localhost:8000/docs"
echo "   Interactive Docs: http://localhost:8000/redoc"
echo "   Health Check: http://localhost:8000/health"
echo ""
echo "üóÑÔ∏è  Database Services:"
echo "   PostgreSQL: $DB_HOST:$DB_PORT (Database: $DB_NAME)"
echo "   Redis: $REDIS_HOST:$REDIS_PORT"
echo ""
echo "üí° Press Ctrl+C to stop the server"
echo ""

# Start the development server with auto-reload
uvicorn main:app --host 0.0.0.0 --port 8000 --reload
